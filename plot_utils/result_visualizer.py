"""
Script for restoring results array from .npz dump file generated by CNN training engine

Author: Julian Ding
"""

import numpy as np
import os, sys
import plot_utils.plot_utils as plu

# Returns a results dictionary
def open_result(path):
    assert os.path.isfile(path), "Provided file ("+path+") does not exist, aborting."
    return np.load(path)

# Dumps an instance of every plot in plot_utils to save_path based on data in result
def dump_visuals(result, save_path=''):
    save_path += '' if save_path.endswith('/') else '/'
    prediction = result['prediction'].reshape(-1,1)
    softmax = result['softmax'].reshape(-1,1)
    loss = result['loss'].reshape(-1,1)
    accuracy = result['accuracy'].reshape(-1,1)
    labels = result['labels'].reshape(-1,1)
    energies = result['energies'].reshape(-1,1)

    vis_energies = plu.convert_to_visible_energy(energies, labels)
    
    class_names = ['gamma', 'e', 'mu']
    index_dict = {name:index for index, name in enumerate(class_names)}
    
    plu.plot_event_energy_distribution(vis_energies, labels, index_dict, save_path=save_path+"energy_distribution.eps")
    plu.plot_confusion_matrix(labels, prediction, vis_energies, class_names, 0, np.max(vis_energies), save_path=save_path+"confusion_matrix.eps")
    
    for i, name in enumerate(class_names):
        plu.plot_classifier_response(softmax, labels, vis_energies, index_dict, {name:i}, save_path=save_path+"classifier_response_"+name+".eps")
        other = class_names[(i+1)%len(class_names)]
        plu.plot_ROC_curve_one_vs_one(softmax, labels, vis_energies, index_dict, name, other, 0, np.max(vis_energies), save_path=save_path+name+"_vs_"+other+".eps")
    index_dict = {name:index for index, name in enumerate(class_names[:2])}
    for name, i in index_dict.items():
        plu.plot_signal_efficiency(softmax, labels, vis_energies, index_dict, name, save_path=save_path+"signal_efficiency_"+name+".eps")
        plu.plot_background_rejection(softmax, labels, vis_energies, index_dict, name, save_path=save_path+"background_rejection_"+name+".eps")
    print ("Dumped performance plots to", save_path)
    
#if __name__ == "main":
#    result = open_result(sys.argv[1])
#    dump_visuals(result, os.dirname(result['data'])+'/plt_dump')